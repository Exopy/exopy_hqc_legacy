# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""GUI used to select the files to convert to ecpy format.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import os

from enaml.widgets.api import (Window, Container, CheckBox, FileDialogEx,
                               PushButton, MultilineField)
from enaml.layout.api import hbox, vbox
from ecpy.utils.traceback import format_exc
from ecpy.utils.widgets.qt_list_str_widget import QtListStrWidget

from .convert import convert_measure

enamldef Main(Window): main:
    """Window used to select the measure to update.

    """
    #: List of path of the measure to update
    attr paths : list = []

    title = 'HQCMeas to Ecpy measure converter'

    Container:

        constraints = [hbox(vbox(ch, ls, old), vbox(log, con)),
                       log.right == con.right]

        PushButton: ch:
            text = 'Choose measures to update'
            clicked ::
                main.paths = FileDialogEx.get_open_file_names(main)

        QtListStrWidget: ls:
            items << [os.path.basename(p) for p in paths]

        CheckBox: old:
            text = 'Move old to _old subdirectory'
            checked = True

        PushButton: con:
            text = 'Convert'
            clicked ::
                for p in paths:
                    archive = None
                    if old.checked:
                        base = os.path.dirname(p)
                        archive = os.path.join(base, '_old')
                        if not os.path.isdir(archive):
                            os.mkdir(archive)
                    try:
                        convert_measure(p, archive)
                    except Exception:
                        msg = '\nFailed to convert %s :\n%s\n'
                        log.text += msg % (p, format_exc())
                    else:
                        log.text += '\nConverted %s\n' % p
                  
                main.paths = []

        MultilineField: log:
            pass
