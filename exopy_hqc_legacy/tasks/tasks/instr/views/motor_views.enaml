# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2023 by ExopyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View for the motor related tasks.

"""
from textwrap import fill

from enaml.layout.api import factory
from enaml.core.api import Conditional
from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo, CheckBox)
from enaml.stdlib.fields import FloatField

from exopy.tasks.api import EVALUATER_TOOLTIP
from exopy.utils.widgets.qt_completers import QtLineCompleter
from exopy_hqc_legacy.utils.layouts import auto_grid_layout
from ...base_instr_view import InstrView


enamldef MoveAbsMotorView(InstrView): view:
    """View for the MoveAbsMotorTask.

    """
    #: Attribute set by the parent view if the task is embedded inside a
    #: LoopTask
    attr in_loop : bool = False

    constraints = [factory(auto_grid_layout)]

    Conditional:
        condition = not in_loop
        Label: angle_lab:
            text = 'Target angle (deg)'
        QtLineCompleter: angle_val:
            hug_width = 'ignore'
            text := task.angle_reached
            entries_updater << task.list_accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

enamldef MoveRelMotorView(InstrView): view:
    """View for the MoveRelMotorTask.

    """
    #: Attribute set by the parent view if the task is embedded inside a
    #: LoopTask
    attr in_loop : bool = False

    constraints = [factory(auto_grid_layout)]

    Conditional:
        condition = not in_loop
        Label: angle_lab:
            text = 'Rel angle motion (deg)'
        QtLineCompleter: angle_val:
            hug_width = 'ignore'
            text := task.angle_reached
            entries_updater << task.list_accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

enamldef MotorReturnAngleView(InstrView): view:
    """View for the ReturnMotorAngleTask.

    """
    #: Attribute set by the parent view if the task is embedded inside a
    #: LoopTask

    constraints = [factory(auto_grid_layout)]

    Label:
        text = 'Wait (s)'
    FloatField:
        value := task.wait_time
        tool_tip = fill("Time to wait before querying values from the "
                        "field source.", 60)
